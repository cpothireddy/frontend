{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nfunction RBuilderLoginComponent_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \" please enter email \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RBuilderLoginComponent_span_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \" enter valid \");\n    i0.ɵɵelementEnd();\n  }\n}\nclass RBuilderLoginComponent {\n  constructor(fb) {\n    this.fb = fb;\n    this.loginForm = this.fb.group({\n      email: [''],\n      password: ['', [Validators.required, this.pwdValidater('abc')]],\n      mobile: [''],\n      notification: []\n    });\n  }\n  getLoginData() {\n    // this.loginForm.setValue({email:'abc@gtt.com',password:'abc'});\n    this.loginForm.patchValue({\n      password: 'abc'\n    });\n    console.log(this.loginForm.value);\n  }\n  // pwdValidater(control: AbstractControl): { [key: string]: boolean } | null {\n  //   console.log(control.value);\n  //   if (control.value === 'chandra') {\n  //     return { 'pwdValid': true };\n  //   }\n  //   return null;\n  // }\n  pwdValidater(pVal) {\n    return control => {\n      if (control.value === pVal) {\n        return {\n          'pwdValid': true\n        };\n      } else {\n        return null;\n      }\n    };\n  }\n  ngOnInit() {\n    this.loginForm.controls['notification'].valueChanges.subscribe(newVal => {\n      console.log(newVal);\n      const emailControl = this.loginForm.controls['email'];\n      if (newVal === 'email') {\n        emailControl.setValidators([Validators.required]);\n      }\n    });\n  }\n  static #_ = this.ɵfac = function RBuilderLoginComponent_Factory(t) {\n    return new (t || RBuilderLoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RBuilderLoginComponent,\n    selectors: [[\"app-r-builder-login\"]],\n    decls: 21,\n    vars: 3,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [\"type\", \"text\", \"formControlName\", \"email\", \"placeholder\", \"Enter Email\"], [4, \"ngIf\"], [\"type\", \"text\", \"formControlName\", \"mobile\", \"placeholder\", \"mobile\"], [\"type\", \"radio\", \"formControlName\", \"notification\", \"value\", \"email\"], [\"type\", \"radio\", \"formControlName\", \"notification\", \"value\", \"mobile\"], [\"type\", \"password\", \"formControlName\", \"password\", \"placeholder\", \"password\"]],\n    template: function RBuilderLoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function RBuilderLoginComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.getLoginData();\n        });\n        i0.ɵɵelement(1, \"input\", 1);\n        i0.ɵɵtemplate(2, RBuilderLoginComponent_span_2_Template, 2, 0, \"span\", 2);\n        i0.ɵɵelement(3, \"br\")(4, \"br\")(5, \"input\", 3)(6, \"br\")(7, \"br\");\n        i0.ɵɵtext(8, \" Notification: \");\n        i0.ɵɵelement(9, \"input\", 4);\n        i0.ɵɵtext(10, \" Email \");\n        i0.ɵɵelement(11, \"input\", 5);\n        i0.ɵɵtext(12, \" Mobile \");\n        i0.ɵɵelement(13, \"br\")(14, \"br\")(15, \"input\", 6);\n        i0.ɵɵtemplate(16, RBuilderLoginComponent_span_16_Template, 2, 0, \"span\", 2);\n        i0.ɵɵelement(17, \"br\")(18, \"br\");\n        i0.ɵɵelementStart(19, \"button\");\n        i0.ɵɵtext(20, \"Submit\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls[\"email\"].touched && ctx.loginForm.controls[\"email\"].errors && ctx.loginForm.controls[\"email\"].errors.required);\n        i0.ɵɵadvance(14);\n        i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls[\"password\"].errors);\n      }\n    },\n    dependencies: [i2.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.RadioControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}\nexport { RBuilderLoginComponent };","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","RBuilderLoginComponent","constructor","fb","loginForm","group","email","password","required","pwdValidater","mobile","notification","getLoginData","patchValue","console","log","value","pVal","control","ngOnInit","controls","valueChanges","subscribe","newVal","emailControl","setValidators","_","ɵɵdirectiveInject","i1","FormBuilder","_2","selectors","decls","vars","consts","template","RBuilderLoginComponent_Template","rf","ctx","ɵɵlistener","RBuilderLoginComponent_Template_form_ngSubmit_0_listener","ɵɵelement","ɵɵtemplate","RBuilderLoginComponent_span_2_Template","RBuilderLoginComponent_span_16_Template","ɵɵproperty","ɵɵadvance","touched","errors"],"sources":["C:\\Users\\chandra.pothireddy\\Desktop\\practice\\finalOne\\src\\app\\rBuilderLogin\\r-builder-login\\r-builder-login.component.ts","C:\\Users\\chandra.pothireddy\\Desktop\\practice\\finalOne\\src\\app\\rBuilderLogin\\r-builder-login\\r-builder-login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { AbstractControl, FormBuilder, ValidatorFn, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-r-builder-login',\n  templateUrl: './r-builder-login.component.html',\n  styleUrls: ['./r-builder-login.component.css']\n})\nexport class RBuilderLoginComponent implements OnInit {\n  constructor(private fb: FormBuilder){}\n  loginForm = this.fb.group({\n    email:[''],\n    password:['', [Validators.required, this.pwdValidater('abc')]],\n    mobile:[''],\n    notification: []\n  });\n  getLoginData() {\n    // this.loginForm.setValue({email:'abc@gtt.com',password:'abc'});\n    this.loginForm.patchValue({password:'abc'});\n    console.log(this.loginForm.value);\n  }\n\n  // pwdValidater(control: AbstractControl): { [key: string]: boolean } | null {\n  //   console.log(control.value);\n  //   if (control.value === 'chandra') {\n  //     return { 'pwdValid': true };\n  //   }\n  //   return null;\n  // }\n\n  pwdValidater(pVal:string): ValidatorFn{\n    return (control: AbstractControl):{[key:string]:boolean}| null => {\n      if(control.value === pVal){\n        return {'pwdValid': true}\n      } else{\n        return null;\n      }\n    }\n  }\n\n  ngOnInit() {\n    this.loginForm.controls['notification'].valueChanges.subscribe((newVal)=>{\n      console.log(newVal);\n      const emailControl = this.loginForm.controls['email'];\n      if(newVal === 'email'){\n        emailControl.setValidators([Validators.required])\n      }\n    })\n  }\n\n  \n\n\n}\n","<form [formGroup]=\"loginForm\" (ngSubmit)=\"getLoginData()\">\n    <input type=\"text\" formControlName=\"email\" placeholder=\"Enter Email\" />\n    <span\n        *ngIf=\"loginForm.controls['email'].touched && loginForm.controls['email'].errors && loginForm.controls['email'].errors.required\">\n        please enter email\n    </span><br /><br />\n    <input type=\"text\" formControlName=\"mobile\" placeholder=\"mobile\" />\n    <br />\n    <br />\n    Notification: <input type=\"radio\" formControlName=\"notification\" value=\"email\"> Email\n    <input type=\"radio\" formControlName=\"notification\" value=\"mobile\"> Mobile\n    <br />\n    <br />\n    <input type=\"password\" formControlName=\"password\" placeholder=\"password\" />\n\n    <span *ngIf=\"loginForm.controls['password'].errors\">\n        enter valid\n    </span>\n\n\n    <br /><br />\n    <button>Submit</button>\n</form>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}